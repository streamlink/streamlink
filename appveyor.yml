environment:

  matrix:
    - PYTHON: "C:\\Python27"
    - PYTHON: "C:\\Python34"
    - PYTHON: "C:\\Python35"
    - PYTHON: "C:\\Python36"
    - PYTHON: "C:\\Python37"
    - PYTHON: "C:\\Python27-x64"
    - PYTHON: "C:\\Python34-x64"
    - PYTHON: "C:\\Python35-x64"
    - PYTHON: "C:\\Python36-x64"
    - PYTHON: "C:\\Python37-x64"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "build.cmd %PYTHON%\\python.exe -m pip install --disable-pip-version-check --user --upgrade pip setuptools"

  # install dev requirements, for testing, etc.
  - "build.cmd %PYTHON%\\python.exe -m pip install -r dev-requirements.txt"
  - "build.cmd %PYTHON%\\python.exe -m pip install pycountry"
  - "build.cmd %PYTHON%\\python.exe -m pip install -e ."

build: off

test_script:
  - "build.cmd %PYTHON%\\python.exe -m pytest --cov"

after_test:
  - rm -rf tests/coverages
  - if not exist dist mkdir dist
  - if exist .coverage (cp .coverage dist\) else (echo no .coverage)
  - codecov
  - if exist coverage.xml (cp coverage.xml dist\) else (echo no coverage.xml)

artifacts:
  - path: dist\*
